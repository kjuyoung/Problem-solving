A non-empty array A consisting of N integers is given.

A triplet (X, Y, Z), such that 0 ≤ X < Y < Z < N, is called a double slice.

The sum of double slice (X, Y, Z) is the total of A[X + 1] + A[X + 2] + ... + A[Y − 1] + A[Y + 1] + A[Y + 2] + ... + A[Z − 1].

For example, array A such that:

    A[0] = 3
    A[1] = 2
    A[2] = 6
    A[3] = -1
    A[4] = 4
    A[5] = 5
    A[6] = -1
    A[7] = 2
contains the following example double slices:

double slice (0, 3, 6), sum is 2 + 6 + 4 + 5 = 17,
double slice (0, 3, 7), sum is 2 + 6 + 4 + 5 − 1 = 16,
double slice (3, 4, 5), sum is 0.
The goal is to find the maximal sum of any double slice.

Write a function:

def solution(A)

that, given a non-empty array A consisting of N integers, returns the maximal sum of any double slice.

For example, given:

    A[0] = 3
    A[1] = 2
    A[2] = 6
    A[3] = -1
    A[4] = 4
    A[5] = 5
    A[6] = -1
    A[7] = 2
the function should return 17, because no double slice of array A has a sum of greater than 17.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [3..100,000];
each element of array A is an integer within the range [−10,000..10,000].





def solution(A):
    leng = len(A)
    left_sum = [0]*leng
    right_sum = [0]*leng
	
    #제일 처음과 마지막은 합산하지 않기 때문에 1~N-1 까지만 for문을 돌게 합니다.
    for i in range(1, leng-1):
    	# 0과 비교하여 큰 값을 배열에 넣으면, 값이 작아지는 경우는 합산 하지 않도록 합니다.
    	left_sum[i] = max(0, left_sum[i-1]+A[i])
	
    for i in range(leng-1, 0, -1):
        right_sum[i-1] = max(0, right_sum[i]+A[i-1])

    result_max = 0
    for i in range(1, leng-1):
        result_max = max(result_max, left_sum[i-1]+right_sum[i+1])

    return result_max
