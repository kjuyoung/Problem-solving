Task description
A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

S is empty;
S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

def solution(S)

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..200,000];
string S is made only of the following characters: "(", "{", "[", "]", "}" and/or ")".





def solution(S):
    bracket = []
    for b in S:
        if b=='(' or b=='[' or b=='{':
            bracket.append(b)
        elif b == ')' or b == ']' or b == '}':
            re = peek(bracket)
            if (re == '(' and b == ')') or (re == '[' and b == ']') or (re == '{' and b == '}'):
                bracket.pop(-1)
            else:
                return 0
    if len(bracket) != 0:
        return 0
    else:
        return 1

def is_empty(S):
    return len(S) == 0

def peek(S):
    if not is_empty(S):
        return S[-1]
    else:
        return -1
