Task description
A non-empty array A consisting of N integers is given. The product of triplet (P, Q, R) equates to A[P] * A[Q] * A[R] (0 ≤ P < Q < R < N).

For example, array A such that:

  A[0] = -3
  A[1] = 1
  A[2] = 2
  A[3] = -2
  A[4] = 5
  A[5] = 6
contains the following example triplets:

(0, 1, 2), product is −3 * 1 * 2 = −6
(1, 2, 4), product is 1 * 2 * 5 = 10
(2, 4, 5), product is 2 * 5 * 6 = 60
Your goal is to find the maximal product of any triplet.

Write a function:

def solution(A)

that, given a non-empty array A, returns the value of the maximal product of any triplet.

For example, given array A such that:

  A[0] = -3
  A[1] = 1
  A[2] = 2
  A[3] = -2
  A[4] = 5
  A[5] = 6
the function should return 60, as the product of triplet (2, 4, 5) is maximal.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [3..100,000];
each element of array A is an integer within the range [−1,000..1,000].





def solution(A):
    max_product = 1
    count = 0
    l = len(A)
    A.sort()
    init = A[l-1]*A[l-2]*A[l-3]
    left = 0
    right = l-1
    if l == 3:
        return A[0]*A[1]*A[2]
    while True:
        if abs(A[left]) <= abs(A[right]):
            if max_product*A[left] <= max_product*A[right]:
                max_product *= A[right]
                right -= 1
            if max_product*A[left] > max_product*A[right]:
                max_product *= A[left]
                left += 1
            count += 1
        elif abs(A[left]) > abs(A[right]):
            if A[left] > 0 or max_product < 0 or count < 2:
                max_product *= A[left]
                left += 1
                count += 1
            elif count == 2:
                max_product *= A[right]
                right -= 1
                count += 1
        if count == 3:
            break
    max_product = max(init, max_product)
    return max_product
