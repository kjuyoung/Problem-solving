Given a string s, find the length of the longest substring without repeating characters.

 
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.


Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.


Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.



class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        answer = 0
        left = 0
        used = {}
        
        for right, char in enumerate(s):
            if char in used and left <= used[char]: # Duplicated character
                left = used[char] + 1
            else:
                answer = max(answer, right - left + 1)  # caculate the length of substring
            used[char] = right                      # input the character with position into the dict
            
        return answer
