Given a string s, return the longest palindromic substring in s.

 

Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.


Example 2:
Input: s = "cbbd"
Output: "bb"
 

Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.



class Solution:
    def longestPalindrome(self, s: str) -> str:
        longest = ''
        def expand(left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            return s[left+1:right]
        
        if (s==s[::-1]) or (len(s) <= 1):
            return s
        
        for i in range(len(s)-1):
            longest = max(longest, expand(i, i+2), expand(i, i+1), key=len)
            
        return str(longest)
