You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.


Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]


Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.




# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry = 0
        node = head = ListNode()
        l1_len, l2_len = 0, 0
        
        if not l1 and not l2:
            return
        
        # check the length of l1, l2
        temp_l1 = l1
        while temp_l1 and temp_l1.next:
            temp_l1 = temp_l1.next
            l1_len += 1
        temp_l2 = l2
        while temp_l2 and temp_l2.next:
            temp_l2 = temp_l2.next
            l2_len += 1
            
        # make the list with the longest list
        while True:
            if l1_len < l2_len:
                temp_l1.next = ListNode()
                temp_l1 = temp_l1.next
                l1_len += 1
            elif l1_len > l2_len:
                temp_l2.next = ListNode()
                temp_l2 = temp_l2.next
                l2_len += 1
            elif l1_len == l2_len:
                break
        
        while l1 and l2:
            if l1.val+l2.val+carry < 10:
                head.next = ListNode(l1.val+l2.val+carry)
                head = head.next
                carry = 0
            elif l1.val+l2.val+carry >= 10:
                carry, val = divmod(l1.val+l2.val+carry, 10)
                head.next = ListNode(val)
                head = head.next
            
            l1 = l1.next
            l2 = l2.next
            
        if carry > 0:
            head.next = ListNode(carry)
            head = head.next
            
        node = node.next
            
        return node
        
==============================================================================

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        root = ListNode()
        result = root
        carry = 0
        while l1 or l2 or carry != 0:
          if l1:
            carry += l1.val
            l1 = l1.next
          if l2:
            carry += l2.val
            l2 = l2.next
          result.next = ListNode(carry % 10)
          result = result.next
          carry = carry // 10
        return root.next

